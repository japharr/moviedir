plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'jacoco'
}

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.jeliliadesina.moviedir"
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'API_DEVELOPER_KEY', "\"${api_developer_key}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures{
        dataBinding = true
        // for view binding :
        // viewBinding = true
    }
    //groovy
    configurations.all {
        resolutionStrategy.force "org.antlr:antlr4-runtime:4.7.1"
        resolutionStrategy.force "org.antlr:antlr4-tool:4.7.1"
    }
}

dependencies {
    implementation "androidx.core:core-ktx:$rootProject.coreKtxVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayoutVersion"
    implementation "androidx.annotation:annotation:$rootProject.annotationVersion"

    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerviewVersion"
    implementation "androidx.cardview:cardview:$rootProject.cardviewVersion"

    // Koin for Android
    implementation "org.koin:koin-android:$rootProject.koinVersion"
    // or Koin for Lifecycle scoping
    implementation "org.koin:koin-androidx-scope:$rootProject.koinVersion"
    // or Koin for Android Architecture ViewModel
    implementation "org.koin:koin-androidx-viewmodel:$rootProject.koinVersion"

    // Room ORM
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    implementation "androidx.paging:paging-runtime-ktx:$rootProject.pagingVersion"
    //implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    //implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    //implementation "com.squareup.retrofit2:converter-scalars:$rootProject.retrofitVersion"

    // Internet Connectivity
    implementation "com.treebo:internetavailabilitychecker:$rootProject.internetChecker"

    // Gson
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // Glide
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    implementation ("com.github.bumptech.glide:okhttp3-integration:$rootProject.glideVersion") {
        exclude group: 'glide-parent'
    }
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"

    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleKtxVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleKtxVersion"

    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"

    // Timber (Logging)
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"
    
    implementation project(':square-image-view')

    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockwebserverVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$rootProject.mockitoInlineVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "androidx.test:core:$rootProject.testCoreVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"

    androidTestImplementation "androidx.appcompat:appcompat:$rootProject.appcompatVersion"
    androidTestImplementation "androidx.recyclerview:recyclerview:$rootProject.recyclerviewVersion"
    androidTestImplementation "com.google.android.material:material:$rootProject.materialVersion"

    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoCoreVersion"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoCoreVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
}

jacoco {
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

// Files with such regex patterns are to be excluded
def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                  '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes
def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
        excludes: fileFilter)

// Source code directory
def mainSrc = "$project.projectDir/src/main/java"

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

// Task declaration
task jacocoTestReport(type: JacocoReport) {
    // Runs only after the dependencies are executed
    dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
    // Export formats
    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))

    // Inform Gradle where the files generated by test cases - are located
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])
}

// Task declaration
task jacocoTestCoverageVerification(type: JacocoCoverageVerification) {
    // Run only after the test reports are generated
    dependsOn = ['jacocoTestReport']
    enabled = true
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*.ec'
    ])

    violationRules {
        failOnViolation = true
        // 1
        rule {
            element = 'PACKAGE'
            includes = ['com.jeliliadesina.moviedir']
            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.3 // should be higher
            }
        }

    }
}

// Make the check gradle task depend on the above task so that failure of above task will fail the check task
check.dependsOn jacocoTestCoverageVerification
